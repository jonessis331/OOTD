// src/screens/DataProcess.ts

import { MergedTags, DetectedItem, OutfitMetadata } from "../utils/dataTypes";
import { saveOutfitData } from "../utils/dataStorage";
import { v4 as uuidv5 } from 'uuid'; 

import { log, logIncomingData } from "~/src/utils/config";;

/**
 * Merges tags from OpenAI and deep tagging services.
 * @param openAITags - Tags generated by OpenAI.
 * @param deepTags - Tags generated by the deep tagging service.
 * @returns A merged tags object.
 */
export const mergeTags = (openAITags: any, deepTags: any): any => {
    log.info("Entering simple mergeTags function");
    logIncomingData({ openAITags, deepTags }, 'mergeTags'); // Log incoming data
    const mergedTags = {
        openAITags: openAITags || {},  // Include all tags from OpenAI
        deepTags: deepTags.data || {}, // Include all tags from the deep tagging service
    };

    log.info("Leaving MergeTags"); // Log the merged tags for debugging
    return mergedTags;
};

/**
 * Creates a complete outfit data object and saves it.
 * @param items - Array of detected items with associated tags.
 * @param outfitMetadata - Metadata about the outfit, including outfit ID, user ID, and outfit image URL.
 * @param selectedTags - Tags selected by the user for specific items.
 * @returns The complete outfit data object.
 */
export const createCompleteOutfitData = async (
    items: DetectedItem[],
    imageUrl: string,
    selectedTags: { [key: string]: any }
): Promise<any> => {
    log.info("Entering createCompleteOutfitData function");
    logIncomingData({ items, imageUrl, selectedTags }, 'createCompleteOutfitData'); // Log incoming data

    const outfitMetadata: OutfitMetadata = {
        outfit_id: "uuidv5()",
        user_id: "67890",
        outfit_image_url: imageUrl,
    };
    log.info(outfitMetadata)

    const processedItems = await Promise.all(items.map(async (item) => {
        logIncomingData(item, 'Processing Item'); // Log incoming item data each item being processed
        const openAITags = selectedTags[item.name] || {};
        const mergedTags = mergeTags(openAITags, item.tags);

        return {
            item_id: item.name,
            item_image_url: item.cropUrl,
            category: mergedTags.deepTags.category || mergedTags.openAITags.category || "unknown",
            tags: mergedTags,
        };
    }));

    const outfitData = {
        user_id: outfitMetadata.user_id,
        outfit_image_url: outfitMetadata.outfit_image_url,
        date_created: new Date().toISOString(),
        items: processedItems,
        additional_info: {},
    };

    // Save outfit data to Supabase
    log.info("Leaving CreateCompleteOutifitData")
    await saveOutfitData(outfitData);

    return outfitData;
};
