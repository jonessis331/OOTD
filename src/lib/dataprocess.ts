import { DetectedItem, OutfitMetadata, SimilarItem } from "../utils/dataTypes";
import { saveOutfitData } from "~/src/utils/dataStorage";
import { log, logIncomingData } from "~/src/utils/config";

/**
 * Merges tags from OpenAI and deep tagging services.
 * @param openAITags - Tags generated by OpenAI.
 * @param deepTags - Tags generated by the deep tagging service.
 * @returns A merged tags object.
 */
export const mergeTags = (openAITags: any, deepTags: any): any => {
  log.info("Entering mergeTags function");
  const mergedTags = {
    openAITags: openAITags || {},
  };

  log.info("Leaving mergeTags");
  return mergedTags;
};

/**
 * Creates a complete outfit data object and saves it.
 * @param items - Array of detected items with associated tags.
 * @param outfitMetadata - Metadata about the outfit, including outfit ID, user ID, and outfit image URL.
 * @param selectedTags - Tags selected by the user for specific items.
 * @param googleItems - Google item data for each detected item.
 * @returns The complete outfit data object.
 */
export const createCompleteOutfitData = async (
  items: DetectedItem[],
  imageUrl: string,
  publicId: string,
  selectedTags: { [key: string]: any },
  googleItems: { [key: string]: SimilarItem },
  user_id: any
): Promise<any> => {
  log.info("Entering createCompleteOutfitData function");
  try {
    const processedItems = items.map((item) => {
      const itemId = item.itemId; // Use unique itemId
      const openAITags = selectedTags[itemId] || {};
      const itemGoogleItem = googleItems[itemId] || null;

      delete openAITags.googleItem; // Ensure googleItem is not duplicated in tags

      const mergedTags = mergeTags(openAITags, item.tags);

      return {
        item_id: itemId,
        item_image_url: item.cropUrl,
        category:
          mergedTags?.deepTags?.category ||
          mergedTags?.openAITags?.category ||
          "unknown",
        tags: openAITags,
        googleItem: itemGoogleItem,
        bounding_box: item.bounding_box,
      };
    });

    const outfitData = {
      user_id: user_id,
      outfit_image_url: imageUrl,
      outfit_image_public_id: publicId,
      date_created: new Date().toISOString(),
      items: processedItems,
      additional_info: {},
    };

    logIncomingData(outfitData, "outfitData");
    log.warn("Leaving createCompleteOutfitData");
    await saveOutfitData(outfitData);

    return outfitData;
  } catch (error) {
    log.error("Error in createCompleteOutfitData:", error);
    throw error;
  }
};
