// src/screens/DataProcess.ts

import { MergedTags, DetectedItem, OutfitMetadata } from "../utils/dataTypes";
import { saveOutfitData } from "../utils/dataStorage";

/**
 * Merges tags from OpenAI and deep tagging services.
 * @param openAITags - Tags generated by OpenAI.
 * @param deepTags - Tags generated by the deep tagging service.
 * @returns A merged tags object.
 */
export const mergeTags = (openAITags: any, deepTags: any): MergedTags => {
  console.log("Entering mergeTags function"); // Log added
  const mergedTags: MergedTags = {
    colors: [...new Set([...(openAITags.color || []), ...(deepTags.data.colors.map((color: any) => color.name) || [])])],
    material: openAITags.material || null,
    occasion: openAITags.occasion || [],
    brand_name: openAITags.brand_name || null,
    style: openAITags.style || null,
    pattern: openAITags.pattern || deepTags.data.labels.find((label: any) => label.classification === "textile pattern")?.name || null,
    fit: deepTags.data.labels.find((label: any) => label.classification === "silhouette")?.name || null,
    category: openAITags.category || deepTags.data.items[0]?.category || null,
  };

  return mergedTags;
};

/**
 * Creates a complete outfit data object and saves it.
 * @param items - Array of detected items with associated tags.
 * @param outfitMetadata - Metadata about the outfit, including outfit ID, user ID, and outfit image URL.
 * @param selectedTags - Tags selected by the user for specific items.
 * @returns The complete outfit data object.
 */
export const createCompleteOutfitData = async (
  items: DetectedItem[],
  imageUrl: string,
  selectedTags: { [key: string]: any }
) => {
  console.log("Entering createCompleteOutfitData function"); // Log added
  const outfitMetadata: OutfitMetadata = {
    outfit_id: "12345", // Ideally, this would be dynamically generated
    user_id: "67890", // Assume this comes from user authentication data
    outfit_image_url: imageUrl,
  };

  // Process each item to merge tags and create item data
  const processedItems = items.map(item => {
    // Retrieve the OpenAI tags for the item, if the user selected a similar item
    const openAITags = selectedTags[item.name] || {};

    // Merge the OpenAI tags with the deep tags
    const mergedTags = mergeTags(openAITags, item.tags);

    return {
      item_id: item.name, // Replace with actual item ID
      item_image_url: item.cropUrl,
      category: mergedTags.category,
      tags: mergedTags,
    };
  });

  // Create the outfit data object
  const outfitData = {
    outfit_id: outfitMetadata.outfit_id,
    user_id: outfitMetadata.user_id,
    outfit_image_url: outfitMetadata.outfit_image_url,
    date_created: new Date().toISOString(),
    items: processedItems,
    additional_info: {
      // Any additional info you want to include, e.g., average rating, customer reviews, etc.
    },
  };

  // Save the outfit data to a file or database
  saveOutfitData(outfitData, `./data/outfit_data_${outfitMetadata.outfit_id}.json`);

  return outfitData;
};